[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":[]},{"path":"/articles/akharborseal_demo.html","id":"essential-packages","dir":"Articles","previous_headings":"Alaska Harbor Seal Example","what":"Essential Packages","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"example relies non-release version {crawl} Additional packages ’ll want load purpose demonstrate ‘real world’ use {pathroutr} re-routing marine animal movement around land features. , use Alaska harbor seal data provided {crawl} package : demonstrate data wrangling pre-processing needed use {crawl}’s movement model predict likely path re-route predicted path around land barriers repeat process using {crawl}’s multiple imputation functionality create set possible predicted paths span model uncertainty","code":"# not run library(remotes) install_github('NMML/crawl@devel') library(crawl) library(sfnetworks) library(pathroutr) library(dplyr) library(sf) library(ggplot2) library(ggspatial) library(dplyr)"},{"path":"/articles/akharborseal_demo.html","id":"pre-processing-track-data-and-land-polygon-data","dir":"Articles","previous_headings":"Alaska Harbor Seal Example","what":"Pre-processing Track Data and Land Polygon Data","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"land data, source Alaska 1:250000 coastal data polygon. provided Alaska Department Natural Resources obtained open data portal (https://gis.data.alaska.gov/datasets/alaska-1250000). commented code provides query pull data directly portal API. Note, polygons intersect bounding box harbor seal movement included. NOTE: step time consuming, load directly package data Now, let’s load harbor seal data {crawl} package. harborSeal_sf data available devel branch. also transform EPSG:3338. Let’s plot things make sure everything looks good. harborSeal_sf data missing values geometry field need filter making line. Movement data harbor seal Alaska. Raw Argos observations derived connect--dots trackline","code":"# akcoast_qry <- \"https://arcgis.dnr.alaska.gov/arcgis/rest/services/OpenData/Physical_AlaskaCoast/MapServer/2/query?where=1%3D1&outFields=*&geometry=-159.240%2C55.112%2C-152.422%2C59.413&geometryType=esriGeometryEnvelope&inSR=4326&spatialRel=esriSpatialRelIntersects&outSR=3338&f=json\" #  # akcoast <- sf::read_sf(akcoast_qry) # akcoast <- sf::st_make_valid(akcoast) data(\"akcoast\") data(\"harborSeal_sf\")  harborSeal_sf <- harborSeal_sf %>% sf::st_transform(3338) l <- harborSeal_sf %>%    dplyr::filter(!sf::st_is_empty(.)) %>%    dplyr::summarise(do_union = FALSE) %>%    sf::st_cast('LINESTRING')  ggplot() +   ggspatial::annotation_spatial(akcoast, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(l, color = \"darkgrey\", size = 0.5) +   ggspatial::layer_spatial(harborSeal_sf, color = \"deepskyblue3\", size = 0.5) +   theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"re-route-raw-argos-observations","dir":"Articles","previous_headings":"Alaska Harbor Seal Example","what":"Re-Route Raw Argos Observations","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"preferred approach rely movement model predicting path seal, can sometimes useful just correct raw observations. , ’s ’ll first.","code":""},{"path":"/articles/akharborseal_demo.html","id":"limit-barrier-polygon-to-region-of-interest","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Route Raw Argos Observations","what":"Limit Barrier Polygon to Region of Interest","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"large geographic area, computational time needed create visibility graph quite large. , want limit land polygon much reasonably can. ’ll creating convex hull boundary around observed data limiting region space. , ’ll go buffer 50 km around point rely buffered features create convex hull. size buffer case-specific. case, likely get away smaller buffer interested connect--dot track model predication. , later, also impute additional, possible tracks model fit better represent model uncertainty. reason, went larger buffer create single network graph. Land barrier polygon limiting 50km buffered convex hull observation points","code":"land_region <- sf::st_buffer(harborSeal_sf, dist = 50000) %>%    sf::st_union() %>%    sf::st_convex_hull() %>%    sf::st_intersection(akcoast) %>%    st_collection_extract('POLYGON') %>%    st_sf() ggplot() +   ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(l, color = \"darkgrey\", size = 0.5) +   ggspatial::layer_spatial(harborSeal_sf, color = \"deepskyblue3\", size = 0.5) +   theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"create-visibility-graph","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Route Raw Argos Observations","what":"Create Visibility Graph","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"point, ready create visibility graph using pathroutr::prt_visgraph() function. ’ll keep centroids = FALSE order speed build. Adding additional centroids increase likelihood linearity calculated shortest path. especially true shortest path crosses larger areas open water. However, adding additional centroids results large increase computational time (creation visual graph subsequent operations). likely little improvement situations shortest path routing follows coast. default setting centroids=FALSE. user chooses set centroids=TRUE, strongly encourage setting centroid_limit large value (default 1e+07). Let’s take look network. network stores “nodes” “edges” need “activate” one converting simple feature collection. Visibility graph network edges created sfnetworks package. vertices land polygon used nodes network edges crossed land removed. Note large triangles large, open water areas. key advantage purpose concentrate detail network along coastline routing tracks around land requires detail. trade-shortest path routing crosses large, open areas less linearity. set centroids=TRUE, centroid point added triangles mesh rebuilt include points.","code":"vis_graph <- prt_visgraph(land_region) vis_graph_sf <- sfnetworks::activate(vis_graph,\"edges\") %>% sf::st_as_sf() ggplot() +   ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(vis_graph_sf, size = 0.5) +   theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"determine-segments-of-track-on-land","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Route Raw Argos Observations","what":"Determine Segments of Track On Land","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"example, interest re-route portions track cross land. , need identify segments consecutive points land , also, points water bookend segment. use information calculate shortest path network create updated series point features.","code":"track_pts <- harborSeal_sf %>% dplyr::filter(!sf::st_is_empty(.)) segs_tbl <- get_barrier_segments(track_pts,land_region) segs_tbl #> # A tibble: 44 × 6 #>      sid start_idx end_idx n_pts             start_pt #>    <int>     <dbl>   <dbl> <dbl>          <POINT [m]> #>  1     1        70      72     1  (-7141.435 1009874) #>  2     2       211     213     1   (17825.82 1009686) #>  3     3       296     298     1 (-166514.5 678462.8) #>  4     4       299     301     1 (-166385.8 678569.6) #>  5     5       310     312     1   (-159772 672617.8) #>  6     6       313     315     1 (-168417.8 679098.1) #>  7     7       346     348     1 (-166934.5 680376.9) #>  8     8       372     375     2   (-167836 679632.4) #>  9     9       390     392     1   (-164953 673937.4) #> 10    10       398     400     1   (-163341.9 680010) #> # ℹ 34 more rows #> # ℹ 1 more variable: end_pt <POINT [m]>"},{"path":"/articles/akharborseal_demo.html","id":"determine-re-routed-track-via-shortest-path","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Route Raw Argos Observations","what":"Determine Re-routed Track via Shortest Path","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"Since bookend points used create visibility graph, need also determine closest network node point. prt_nearestnode() function relies nabor::knn() function . user need call explicitly handled within prt_shortpath() function. Now, information need calculate shortest path network segment. igraph::shortest_paths() function calculates returns series edges make shortest path (distance) start node end node. prt_shortpath() function wraps additional functionality (e.g. blending network, identifying nearest nodes start end points, assembling path, extending path end connect bookend points). Segments identified cross land re-routed along shortest path throught visibility network","code":"segs_tbl <- segs_tbl %>% prt_shortpath(vis_graph)  ggplot() +    ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(segs_tbl$geometry, color = \"deepskyblue3\") +   theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"update-geometry-with-re-routed-coordinates","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Route Raw Argos Observations","what":"Update Geometry With Re-routed Coordinates","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"reality, time user simply want provide ordered series points, barrier polygon, spatial network. {pathroutr} includes convenience function , prt_reroute(). return two-column tibble index location geometry re-routed point. user can use update original data see fit. , prt_update_points() function can used replace geometry place. last step done inserting fixed points back original path. take number points original segment distribute equal number points along updated path. geometry original dataset updated place, users may want create customized functions workflows better track updates original data. Raw Argos observation geometries updated place re-routed paths","code":"track_pts_fix <- prt_reroute(track_pts, land_region, vis_graph)  track_pts_fix <- prt_update_points(track_pts_fix, track_pts) track_line_fixed <- track_pts_fix %>% summarise(do_union = FALSE) %>% st_cast('LINESTRING')  ggplot() +   ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(track_line_fixed, color = \"darkgrey\", size = 0.5) +   ggspatial::layer_spatial(track_pts_fix, color = \"deepskyblue3\", size = 0.5) +   theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"re-routing-a-movement-model-prediction","dir":"Articles","previous_headings":"Alaska Harbor Seal Example","what":"Re-Routing a Movement Model Prediction","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"Now, ’ll move preferred workflow establish movement model raw location observations. , rely example {crawl} package. , model approaches (e.g. {foieGras}) work well. plans provide specific methods variety model outputs future releases.","code":""},{"path":"/articles/akharborseal_demo.html","id":"fit-movement-model-and-predict-locations","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Routing a Movement Model Prediction","what":"Fit Movement Model and Predict Locations","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"might noticed re-routed raw observations, trackline derived points can still cross land. control presence observation points land. irregular sometimes large time intervals common location data marine mammals, avoided. However, movement model, can predicted finer location intervals limit possibility. notice example, prediction interval every 15 minutes.","code":"##Fit model as given in Johnson et al. (2008) Ecology 89:1208-1215 ## Start values for theta come from the estimates in Johnson et al. (2008) fixPar = c(log(250), log(500), log(1500), rep(NA,5), 0) displayPar( mov.model=~1, err.model=list(x=~Argos_loc_class-1),data=harborSeal_sf,              activity=~I(1-DryTime),fixPar=fixPar) #>                  ParNames   fixPar thetaIdx #> 1 ln tau Argos_loc_class0 5.521461       NA #> 2 ln tau Argos_loc_class1 6.214608       NA #> 3 ln tau Argos_loc_class2 7.313220       NA #> 4 ln tau Argos_loc_class3       NA        1 #> 5 ln tau Argos_loc_classA       NA        2 #> 6 ln tau Argos_loc_classB       NA        3 #> 7    ln sigma (Intercept)       NA        4 #> 8     ln beta (Intercept)       NA        5 #> 9                  ln phi 0.000000       NA constr=list(   lower=c(rep(log(1500),3), rep(-Inf,2)),   upper=rep(Inf,5) )  set.seed(123) fit1 <- crwMLE(   mov.model=~1, err.model=list(x=~Argos_loc_class-1), activity=~I(1-DryTime),   data=harborSeal_sf,  Time.name=\"Time\",    fixPar=fixPar, theta=c(rep(log(5000),3),log(3*3600), 0),   constr=constr, method=\"L-BFGS-B\",   control=list(maxit=2000, trace=1, REPORT=1) ) #> Beginning SANN initialization ... #> Beginning likelihood optimization ... #> iter    1 value 41202.609844 #> iter    2 value 41056.998394 #> iter    3 value 40756.499672 #> iter    4 value 40146.411888 #> iter    5 value 40066.268387 #> iter    6 value 40005.050127 #> iter    7 value 40001.092459 #> iter    8 value 40001.050325 #> iter    9 value 40001.048541 #> iter   10 value 40001.048534 #> final  value 40001.048534  #> converged  pred1 = crwPredict(fit1, predTime = '15 min') pred1_sf <- pred1 %>% crw_as_sf(\"POINT\",\"p\")"},{"path":"/articles/akharborseal_demo.html","id":"identify-predicted-locations-on-land","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Routing a Movement Model Prediction","what":"Identify Predicted Locations on Land","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":", need identify segments consecutive locations land determine associated start end nodes within network.","code":"segs_tbl <- get_barrier_segments(pred1_sf,land_region) segs_tbl #> # A tibble: 140 × 6 #>      sid start_idx end_idx n_pts             start_pt #>    <int>     <dbl>   <dbl> <dbl>          <POINT [m]> #>  1     1      2426    2435     8   (16195.24 1008923) #>  2     2      2482    2485     2   (13845.85 1009221) #>  3     3      2486    2488     1   (14334.24 1007460) #>  4     4      2488    2557    68   (14625.18 1006411) #>  5     5      2648    2651     2    (47203.07 912631) #>  6     6      2656    2662     5  (44653.54 904336.9) #>  7     7      3260    3263     2 (-169713.6 678313.5) #>  8     8      3524    3531     6   (-166814 672859.7) #>  9     9      3545    3564    18 (-166337.5 678529.5) #> 10    10      3610    3616     5 (-166162.5 678383.6) #> # ℹ 130 more rows #> # ℹ 1 more variable: end_pt <POINT [m]>"},{"path":"/articles/akharborseal_demo.html","id":"re-route-model-prediction-via-shortest-path","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Routing a Movement Model Prediction","what":"Re-route Model Prediction via Shortest Path","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"just like raw observations, use prt_shortpath() function calculate re-routed paths Re-routed segments predicted path","code":"segs_tbl <- segs_tbl %>% prt_shortpath(vis_graph)  ggplot() +    ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(segs_tbl$geometry, color = \"deepskyblue3\") +   theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"update-predicted-path","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Re-Routing a Movement Model Prediction","what":"Update Predicted Path","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"first example, skipped last steps just relied prt_reroute() prt_update_points() functions. Updated predicted path re-routed geometries","code":"track_pts_fix <- prt_reroute(pred1_sf, land_region, vis_graph)  track_pts_fix <- prt_update_points(track_pts_fix, pred1_sf) track_line_fixed <- track_pts_fix %>% summarise(do_union = FALSE) %>% st_cast('LINESTRING')  ggplot() +   ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(track_line_fixed, color = \"deepskyblue3\", size = 0.5) +    theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"multiple-imputation","dir":"Articles","previous_headings":"Alaska Harbor Seal Example","what":"Multiple Imputation","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"recommended analytic workflow {crawl} movement models characterize movement collection imputed paths model fit. {pathroutr} re-routing can applied imputed paths , hopefully, provide complete picture uncertainty.","code":""},{"path":"/articles/akharborseal_demo.html","id":"create-multiple-imputations-from-crawl-model","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Multiple Imputation","what":"Create Multiple Imputations from {crawl} Model","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"use crawl::crwSimulator() crawl::crwPostIS() functions create imputed paths. code tidyverse-centric approach relies dplyr::rowwise() dplyr::mutate() draw , , re-route 5 imputed paths. Note, , set blend = FALSE prt_reroute() function call. just save computation time example. figure combines predicted path collection five imputed paths. Note routing tracks around land barrier features predicted track imputed tracks. One thing keep mind imputed tracks often less linear inertia , thus, greater number small land crossings. means re-routing one imputed tracks likely take longer predicted path. exact number imputed paths needed case specific. However, 20 likely needed. Five imputed paths shown along predicted likely path re-routing around land barrier.","code":"crw_sim <- crawl::crwSimulator(fit1, predTime = \"15 min\") #> Computing importance weights ...  imputes <- tibble::tibble(.rows = 5) %>%    dplyr::rowwise() %>%    mutate(postis = list(crwPostIS(crw_sim, fullPost = FALSE)),          pts = list(crw_as_sf(postis, locType = \"p\", ftype = \"POINT\")),          rrt_pts = list(prt_reroute(pts, land_region, vis_graph, blend = FALSE)),          pts_fix = list(prt_update_points(rrt_pts, pts)),          lines_fix = list(pts_fix %>% summarise(do_union = FALSE) %>% st_cast('LINESTRING'))          )  sim_lines <- do.call(rbind, imputes$lines_fix) ggplot() +   ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(sim_lines, color = \"deepskyblue\", alpha = 0.35) +   ggspatial::layer_spatial(track_line_fixed, color = \"deepskyblue3\", size = 0.5) +    theme_void()"},{"path":"/articles/akharborseal_demo.html","id":"space-use-analysis","dir":"Articles","previous_headings":"Alaska Harbor Seal Example > Multiple Imputation","what":"Space Use Analysis","title":"Re-routing Harbor Seal Movement Tracks Around Land with {pathroutr}","text":"Understanding space use common goal telemetry data like presented example. Since movement model allows us predict regular intervals, can use count predicted points within regular grid represent space use. , averaging count across multiple imputed paths can create space use surface incorporates uncertainty. First thing ’ll want create regular grid bounding box study area. important base grid sim_lines complete spatial coverage imputed tracks. ’ll use hexagonal grid remove grid cells fall within land polygon. leave cells completely water touch overlap coastline. Now, need join fixed points imputations (imputes$pts_fix) hex_grid count number points per grid cell. seal-use statistics, ’ll want average counts per grid cell across imputed tracks. also calculate standard deviation, CV, normalized CV use plot communicate uncertainty. final plot seal use presented log10 scale transparency set based normalized CV cells higher uncertainty transparent.","code":"hex_grid <- sf::st_make_grid(   st_as_sfc(st_bbox(sim_lines)),   cellsize = 5000,   square = FALSE ) %>% st_sf() %>%    st_filter(st_union(land_region), .predicate = pathroutr:::not_within) %>%    tibble::rowid_to_column(var = \"hexid\") # Suppress summarise info options(dplyr.summarise.inform = FALSE)  hexbins <- imputes$pts_fix %>% purrr::map(~ {   st_join(.x, hex_grid, join = st_intersects) %>%      sf::st_set_geometry(NULL) %>%      group_by(hexid) %>%      summarise(n = n()) %>%      right_join(hex_grid, by = \"hexid\") %>%      sf::st_sf()}) seal_use <- do.call(rbind, hexbins) %>%    mutate(n = ifelse(is.na(n),0,n)) %>%    group_by(hexid) %>% summarise(n_mean = mean(n), n_sd = sd(n)) %>%    dplyr::filter(n_mean > 0) %>%    dplyr::mutate(n_cv = n_sd/n_mean,                 n_cv2 = n_cv/max(n_cv)) ggplot() +   ggspatial::annotation_spatial(land_region, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(seal_use,                             aes(fill = n_mean, alpha = 1 - n_cv2), color = \"white\", size = 0.05) +    scale_fill_viridis_c(trans = \"log10\") +   theme_void()"},{"path":"/articles/reroute_demo.html","id":"the-test-environment","dir":"Articles","previous_headings":"","what":"The Test Environment","title":"Re-routing Straight Line Paths Around Barriers - A Visibility Graph Demo","text":"First, let’s setup test space included land barrier points interest. based north Kodiak Island region Alaska, USA (, exact replica. , navigational use!!).  complexity nearshore environment small islands narrow passages difficult situation estimating marine animal tracks telemetry devices often error associated location estimates. , sample 15 points interest , , connect line representing path across complicated landscape.  Now, let’s sample 10000 points along string represent simulated path track observations.","code":"library(dplyr) library(ggplot2) library(sf) library(ggspatial) ggplot() +    ggspatial::annotation_spatial(data = land_barrier,                                  fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(data = poi) +   theme_void() l_pts <- poi %>% slice_sample(n = 15) path <- l_pts %>% summarise(do_union = FALSE) %>% st_cast('LINESTRING')  ggplot() +    ggspatial::annotation_spatial(land_barrier, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(poi) +   ggspatial::layer_spatial(path, color = \"deepskyblue3\") +   ggspatial::layer_spatial(l_pts[1,], color = \"darkgreen\", size = 4) +   ggspatial::layer_spatial(l_pts[15,], color = \"darkred\", size = 4) +   theme_void() track_pts <- st_sample(path, size = 10000, type = \"regular\")  ggplot() +    ggspatial::annotation_spatial(land_barrier, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(path, color = \"deepskyblue3\") +   ggspatial::layer_spatial(track_pts) +   theme_void()"},{"path":"/articles/reroute_demo.html","id":"re-route-the-path","dir":"Articles","previous_headings":"","what":"Re-route the path","title":"Re-routing Straight Line Paths Around Barriers - A Visibility Graph Demo","text":"first function ’ll use {pathroutr} package get_barrier_segments() identifies consecutive track points intersect land barrier. result function tibble stores key metadata segments identified cross land. start_idx end_idx columns store row index two points bookend stretch consecutive points intersect barrier polygon. points intersect barrier. n_pts column number consecutive points intersect barrier. Lastly, start_pt end_pt columns store Simple Feature geometry bookend points represented start_idx end_idx. Later, geometries used identify nearest node network shortest path routing final, updated path start end geometries. next step create visibility graph. , essentially, road network marine environment. simple terms, connect vertices barrier polygon Delaunay triangle mesh , , remove edges cross land. prt_visgraph() function returns undirected graph type sfnetwork created sfnetworks package. Edge lengths stored weight attribute visibility graph. computationally intensive step likely identification edges intersect barrier polygon. try minimize , first, buffering barrier -1 meter calling sf::st_intersect(). nodes network also vertices barrier polygon, edges intersect barrier polygon. buffering -1 meter, disconnect nodes. didn’t , need evaluate two spatial predicate functions (sf::st_crosses() sf::st_within()). negative buffer adjustment, can rely solely sf::st_intersect(). step minimize compute time evaluate edges intersect barrier polygon feature. Instead evaluate polygon features intersect edges. sf::st_intersect() evaluates row wise, minimizes number evaluations since number polygon features barrier always going much much smaller number edges. previous development versions {pathroutr} relied {stplanr} package. Now, rely {sfnetworks} one advantage approach can use sfnetworks::st_network_blend() function integrate segment start end points network. Previously, nearest existing network node start/end points used start end shortest path calculation. straight line , , drawn start/end points start end path complete re-routed track segment. sfnetworks::st_network_blend() function provides robust solution creating new network nodes existing edge closest point provided segment start end points. new network nodes serve start end points shortest path. , , extend path include segment start end points. Additionally, now also conduct integrity check newly created LINESTRING ensure directionality consistent (e.g. first node LINESTRING segment start point). resolve previous issues created spurious line segments diverged determined shortest path.  process get_barrier_segments() prt_shortpath() likely across workflows. , prt_reroute() function exists simplify process user. short, function calls two functions along error handling data checking. example code prt_reroute() followed call prt_update_points(). even efficient coding, %>% function used pipe result prt_reroute() prt_update_points(). result version track_pts re-routed geometry updated place. Users may want construct function updating points also tracking rows updated adjusting column values needed.","code":"segs_tbl <- get_barrier_segments(track_pts,land_barrier) segs_tbl #> # A tibble: 42 × 6 #>      sid start_idx end_idx n_pts            start_pt #>    <int>     <dbl>   <dbl> <dbl>         <POINT [m]> #>  1     1        33     218   184 (85824.04 935894.4) #>  2     2       245     283    37 (82196.32 938837.6) #>  3     3       296     331    34 (81323.61 939545.7) #>  4     4       381     390     8 (81376.99 940367.8) #>  5     5       406     509   102 (81915.14 940485.5) #>  6     6       579     638    58 (85639.15 941300.5) #>  7     7       955    1176   220  (88924.9 942735.2) #>  8     8      1613    1726   112 (77856.78 946399.8) #>  9     9      1771    2382   610 (81205.59 947352.1) #> 10    10      2416    2922   505 (94147.97 951111.3) #> # ℹ 32 more rows #> # ℹ 1 more variable: end_pt <POINT [m]> vis_graph <- prt_visgraph(land_barrier, buffer = 150) segs_tbl <- segs_tbl %>% prt_shortpath(vis_graph, blend = TRUE)  ggplot() +    ggspatial::annotation_spatial(land_barrier, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(segs_tbl$geometry, color = \"deepskyblue3\") +   theme_void() track_pts_fix <- prt_reroute(track_pts, land_barrier, vis_graph, blend = TRUE)  track_pts_fix <- prt_update_points(track_pts_fix, track_pts)"},{"path":"/articles/reroute_demo.html","id":"did-it-work","dir":"Articles","previous_headings":"","what":"Did it work?","title":"Re-routing Straight Line Paths Around Barriers - A Visibility Graph Demo","text":"final plot corrected path. green dot start red dot end. blue line shortest path fix black line new path. Red line represents original path. everything working correctly, black lines crossing land.","code":"track_pts <- track_pts %>% st_cast('LINESTRING') track_line_fixed <- track_pts_fix %>% summarise(do_union = FALSE) %>% st_cast('LINESTRING')  ggplot() +    ggspatial::annotation_spatial(land_barrier, fill = \"cornsilk3\", size = 0) +   ggspatial::layer_spatial(track_pts, color = \"red3\") +   ggspatial::layer_spatial(segs_tbl$geometry, color = \"deepskyblue3\", size = 2) +   ggspatial::layer_spatial(track_line_fixed) +   ggspatial::layer_spatial(l_pts[1,], color = \"darkgreen\", size = 4) +   ggspatial::layer_spatial(l_pts[15,], color = \"darkred\", size = 4) +   theme_void()"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josh London. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Josh M. London. (2020, December 14). pathroutr: R Package (Re-)Routing Paths Around Barriers (Version v0.1.1-beta). Zenodo. http://doi.org/10.5281/zenodo.4321827","code":"@Manual{,   title = {pathroutr: An R Package for (Re-)Routing Paths Around Barriers},   author = {Josh M. London},   month = {dec},   year = {2020},   publisher = {Zenodo},   version = {v0.1.1-beta},   doi = {10.5281/zenodo.4321827},   url = {https://doi.org/10.5281/zenodo.4321827}, }"},{"path":"/index.html","id":"pathroutr","dir":"","previous_headings":"","what":"An R Package for (Re-)Routing Paths Around Barriers","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"goal {pathroutr} provide functions re-routing paths cross land around barrier polygons. use case mind movement paths derived location estimates marine animals. Due error associated locations uncommon tracks cross land. {pathroutr} package aims provide pragmatic fast solution re-routing paths around land along efficient path. important note re-routed paths statistical models may unintended consequences biases associated depends study animal, study area, error nature original data. Re-routed paths may also exceed speed physiological capabilities study species.","code":""},{"path":"/index.html","id":"credit-where-credit-is-due","dir":"","previous_headings":"","what":"Credit Where Credit is Due","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"believe first implementation visibility graphs within R spatial routing. However, three sources key importance developing approach Seaway distances PostgreSQL Angus Cameron (24 Apr, 2016) Pyvisgraph Python package Christian Reksten-Monsen Jan, Gene Eu, et al. “$ $ Shortest Path Algorithm Based Delaunay Triangulation.” IEEE/ASME Transactions Mechatronics 19.2 (2013): 660-666. DOI: 10.1109/TMECH.2013.2252076 addition, sf sfnetworks R packages key importance functionality within {pathroutr}. special acknowledgement {stplanr} package also warranted early development versions relied {stplanr} functions. , course, possible without {igraph} package Lucas van der Meer, Lorena Abad, Andrea Gilardi Robin Lovelace (2021). sfnetworks: Tidy Geospatial Networks. R package version 0.5.2. https://CRAN.R-project.org/package=sfnetworks Pebesma, E., 2018. Simple Features R: Standardized Support Spatial Vector Data. R Journal 10 (1), 439-446, https://doi.org/10.32614/RJ-2018-009 Lovelace, R. Ellison, R., 2017. stplanr: Package Transport Planning. R Journal. https://doi.org/10.32614/RJ-2018-053 Csardi G, Nepusz T: igraph software package complex network research, InterJournal, Complex Systems 1695. 2006. https://igraph.org","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"{pathroutr} currently available CRAN also requires R >= 4.0. Please upgrade version R, needed, proceeding. Future versions {pathroutr} may support pre-4.0 versions R. , now, 4.0+ supported.","code":""},{"path":"/index.html","id":"install-via-r-universe","dir":"","previous_headings":"Installation","what":"Install via R-Universe","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"Starting v0.2.1, {pathroutr} available via R-Universe. can also add repository local list repositories .Rprofile ensure update.packages() pulls new releases {pathroutr}","code":"# Install new pathroutr version from my R-Universe repository install.packages(\"pathroutr\", repos = \"https://jmlondon.r-universe.dev\") #install.packages(\"usethis\") usethis::edit_r_profile()  # add the following text or replace existing repos option  options(repos = c(jmlondon = 'https://jmlondon.r-universe.dev',                   CRAN = 'https://cloud.r-project.org'))"},{"path":"/index.html","id":"install-via-github","dir":"","previous_headings":"Installation","what":"Install via Github","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"development version {pathroutr} available GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"jmlondon/pathroutr\")"},{"path":"/index.html","id":"package-dependencies","dir":"","previous_headings":"","what":"Package Dependencies","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"{pathroutr} highly dependent upon sfnetworks sf packages. available CRAN. Please note minimum supported version sf 0.9. , might also good time check update sf package versions. Core packages tidyverse (dplyr, purrr, tibble) also required.","code":""},{"path":"/index.html","id":"questions-contributions--code-of-conduct","dir":"","previous_headings":"","what":"Questions, Contributions, & Code of Conduct","title":"An R Package for (Re-)Routing Paths Around Barriers","text":"Please note pathroutr project released Contributor Code Conduct. contributing project, agree abide terms. strongly encourage file Issues submit Pull Requests can ensure package meets community needs functions reliably. Please, please, please best create reproducible example use reprex package share code within Issue. Also, enabled Discussion option within GitHub repository questions, thoughts, ideas may qualify Issue Pull Request.","code":""},{"path":"/reference/akcoast.html","id":null,"dir":"Reference","previous_headings":"","what":"Alaska coastline — akcoast","title":"Alaska coastline — akcoast","text":"Alaska 1:250000 coastal data polygon. provided Alaska Department Natural Resources obtained open data portal (https://gis.data.alaska.gov/datasets/alaska-1250000). Note, polygons intersect bounding box harbor seal movement included.","code":""},{"path":"/reference/akcoast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alaska coastline — akcoast","text":"","code":"akcoast"},{"path":"/reference/akcoast.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Alaska coastline — akcoast","text":"Simple feature collection 273 features 5 fields: geometry POLYGON","code":""},{"path":"/reference/akcoast.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Alaska coastline — akcoast","text":"https://gis.data.alaska.gov/datasets/alaska-1250000","code":""},{"path":"/reference/get_barrier_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify track points that intersect with a barrier polygon — get_barrier_segments","title":"Identify track points that intersect with a barrier polygon — get_barrier_segments","text":"function identifies segments consecutive points intersect barrier polygon feature. result data frame segment records identify portions track need re-routed. result function can directly passed prt_nearestnode().","code":""},{"path":"/reference/get_barrier_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify track points that intersect with a barrier polygon — get_barrier_segments","text":"","code":"get_barrier_segments(trkpts, barrier)"},{"path":"/reference/get_barrier_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify track points that intersect with a barrier polygon — get_barrier_segments","text":"trkpts Simple Feature points ('sf', 'sfc_POINT'/'sfc_MULTIPOINT') represent track points. Order accepted bounding box trkpts within bounding box barrier polygon. barrier Simple Feature polygon ('sf', 'sfc_POLYGON'/'sfc_MULTIPOLYGON') representing barrier feature. barrier supplied prt_visgraph() function.","code":""},{"path":"/reference/get_barrier_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify track points that intersect with a barrier polygon — get_barrier_segments","text":"data.frame representing segments consecutive points intersect barrier feature. start_pt end_pt geometry columns represent bookend points segment intersect barrier feature. n_pts column number points re-routed.","code":""},{"path":"/reference/land_barrier.html","id":null,"dir":"Reference","previous_headings":"","what":"land barrier — land_barrier","title":"land barrier — land_barrier","text":"polygon dataset used test demonstrate package functions routing paths around barriers","code":""},{"path":"/reference/land_barrier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"land barrier — land_barrier","text":"","code":"land_barrier"},{"path":"/reference/land_barrier.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"land barrier — land_barrier","text":"Simple feature collection 19 features 0 fields: geometry MULTIPOLYGON","code":""},{"path":"/reference/land_barrier.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"land barrier — land_barrier","text":"geopackage file available extData","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/poi.html","id":null,"dir":"Reference","previous_headings":"","what":"points of interest — poi","title":"points of interest — poi","text":"point dataset used test demonstrate package functions routing paths around barriers","code":""},{"path":"/reference/poi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"points of interest — poi","text":"","code":"poi"},{"path":"/reference/poi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"points of interest — poi","text":"Simple feature collection 67 features 0 fields: geometry MULTIPOINT","code":""},{"path":"/reference/poi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"points of interest — poi","text":"geopackage file available extData","code":""},{"path":"/reference/prt_extend_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a path to include given start and end points — prt_extend_path","title":"Extend a path to include given start and end points — prt_extend_path","text":"Extend path include given start end points","code":""},{"path":"/reference/prt_extend_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a path to include given start and end points — prt_extend_path","text":"","code":"prt_extend_path(l_geom, start_pt, end_pt)"},{"path":"/reference/prt_extend_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a path to include given start and end points — prt_extend_path","text":"l_geom geometry passed inside prt_shortpath() start_pt start point end_pt end point","code":""},{"path":"/reference/prt_extend_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a path to include given start and end points — prt_extend_path","text":"linestring","code":""},{"path":"/reference/prt_nearestnode.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the nearest node for start and end points in segs_tbl — prt_nearestnode","title":"Find the nearest node for start and end points in segs_tbl — prt_nearestnode","text":"Find nearest node start end points segs_tbl","code":""},{"path":"/reference/prt_nearestnode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the nearest node for start and end points in segs_tbl — prt_nearestnode","text":"","code":"prt_nearestnode(segs_tbl, vis_graph)"},{"path":"/reference/prt_nearestnode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the nearest node for start and end points in segs_tbl — prt_nearestnode","text":"segs_tbl output get_barrier_segments() vis_graph sfnetwork output prt_visgraph()","code":""},{"path":"/reference/prt_nearestnode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the nearest node for start and end points in segs_tbl — prt_nearestnode","text":"data frame updated columns nearest start end nodes","code":""},{"path":"/reference/prt_reroute.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-route track points around barrier feature — prt_reroute","title":"Re-route track points around barrier feature — prt_reroute","text":"convenience wrapper, suggested function, re-routing trkpts series ordered POINT features around barrier polygon via vis_graph built prt_visgraph() function. output can used starting point custom process replace original geometry. , provide output tibble directly prt_update_points() along trkpts simply updating place.","code":""},{"path":"/reference/prt_reroute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-route track points around barrier feature — prt_reroute","text":"","code":"prt_reroute(trkpts, barrier, vis_graph, blend = TRUE)"},{"path":"/reference/prt_reroute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-route track points around barrier feature — prt_reroute","text":"trkpts Simple Feature points ('sf', 'sfc_POINT'/'sfc_MULTIPOINT') represent track points. Order accepted bounding box trkpts within bounding box barrier polygon. barrier Simple Feature polygon ('sf', 'sfc_POLYGON'/'sfc_MULTIPOLYGON') representing barrier feature. barrier supplied prt_visgraph() function. vis_graph sfnetwork prt_visgraph() blend boolean whether blend start/end points network","code":""},{"path":"/reference/prt_reroute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-route track points around barrier feature — prt_reroute","text":"two-column tibble column fid representing row index trkpts replaced new geometry geometry column. trkpts barrier spatially intersect empty tibble returned.","code":""},{"path":"/reference/prt_shortpath.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the shortest path through a visibility network between two points — prt_shortpath","title":"Calculate the shortest path through a visibility network between two points — prt_shortpath","text":"Calculate shortest path visibility network two points","code":""},{"path":"/reference/prt_shortpath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the shortest path through a visibility network between two points — prt_shortpath","text":"","code":"prt_shortpath(segs_tbl, vis_graph, blend = TRUE)"},{"path":"/reference/prt_shortpath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the shortest path through a visibility network between two points — prt_shortpath","text":"segs_tbl tbl get_barrier_segments() vis_graph sfnetwork prt_visgraph() blend boolean whether blend start/end points network","code":""},{"path":"/reference/prt_shortpath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the shortest path through a visibility network between two points — prt_shortpath","text":"segs_tbl data frame added geometry column shortest path LINESTRING connects start_pt end_pt coordinates","code":""},{"path":"/reference/prt_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim tracks to start and end outside barrier — prt_trim","title":"Trim tracks to start and end outside barrier — prt_trim","text":"Trim tracks start end outside barrier","code":""},{"path":"/reference/prt_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim tracks to start and end outside barrier — prt_trim","text":"","code":"prt_trim(trkpts, barrier)"},{"path":"/reference/prt_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim tracks to start and end outside barrier — prt_trim","text":"trkpts Simple Feature points ('sf', 'sfc_POINT'/'sfc_MULTIPOINT') represent track points. Order accepted bounding box trkpts within bounding box barrier polygon. barrier Simple Feature polygon ('sf', 'sfc_POLYGON'/'sfc_MULTIPOLYGON') representing barrier feature. barrier supplied prt_visgraph() function.","code":""},{"path":[]},{"path":"/reference/prt_update_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Update track points with fixed geometry — prt_update_points","title":"Update track points with fixed geometry — prt_update_points","text":"Original geometry updated place (currently) record points updated provided.","code":""},{"path":"/reference/prt_update_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update track points with fixed geometry — prt_update_points","text":"","code":"prt_update_points(rrt_pts, trkpts)"},{"path":"/reference/prt_update_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update track points with fixed geometry — prt_update_points","text":"rrt_pts output prt_reroute() tibble rrt_idx geometry columns trkpts original trkpts Simple Features Collection","code":""},{"path":"/reference/prt_update_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update track points with fixed geometry — prt_update_points","text":"trkpts updated geometry","code":""},{"path":"/reference/prt_visgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a visibility graph — prt_visgraph","title":"Create a visibility graph — prt_visgraph","text":"Create visibility graph","code":""},{"path":"/reference/prt_visgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a visibility graph — prt_visgraph","text":"","code":"prt_visgraph(   barrier,   buffer = 0,   centroids = FALSE,   centroid_limit = 1e+07,   aug_points = NULL )"},{"path":"/reference/prt_visgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a visibility graph — prt_visgraph","text":"barrier simple feature 'POLYGON' 'MULTIPOLYGON' can cast 'POLYGON' buffer integer specifying buffer distance barrier centroids logical whether include centroids mesh centroid_limit integer minimum size (m^2) adding centroid triangles aug_points simple feature 'POINT' 'MULTIPOINT' additional nodes","code":""},{"path":"/reference/prt_visgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a visibility graph — prt_visgraph","text":"SpatialLinesNetwork","code":""},{"path":"/reference/spatial_predicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial predicates — spatial_predicates","title":"Spatial predicates — spatial_predicates","text":"custom spatial predicate functions negated versions spatial predicates st_within(), st-crosses(), st_intersects","code":""},{"path":"/reference/spatial_predicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial predicates — spatial_predicates","text":"","code":"not_crosses(x, y)  not_within(x, y)  not_intersects(x, y)"},{"path":"/reference/spatial_predicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial predicates — spatial_predicates","text":"x, y simple features.","code":""},{"path":"/news/index.html","id":"pathroutr-021","dir":"Changelog","previous_headings":"","what":"pathroutr 0.2.1","title":"pathroutr 0.2.1","text":"now calls igraph::shortest_path() directly instead {sfnetworks} wrappers additional updates aimed improving speed","code":""},{"path":"/news/index.html","id":"pathroutr-020","dir":"Changelog","previous_headings":"","what":"pathroutr 0.2.0","title":"pathroutr 0.2.0","text":"switched {stplanr} {sfnetworks} network creation shortest path calc implement use sfnetworks::st_network_blend() identify start/end node points shortest path added additional check creating shortest path LINESTRING ensure direction correct updated vignettes reflect changes removed function prt_extend_line(); now uses prt_extend_path()","code":""},{"path":"/news/index.html","id":"pathroutr-011","dir":"Changelog","previous_headings":"","what":"pathroutr 0.1.1","title":"pathroutr 0.1.1","text":"added AK harbor seal demo vignette add prt_trim() remove starting ending points w/barrier improvements re-factoring core functions added prt_reroute() convenience wrapper continued improvement documentation specified version requirements R (4.0+) packages initial beta release Zenodo.org archive created","code":""},{"path":"/news/index.html","id":"pathroutr-010","dir":"Changelog","previous_headings":"","what":"pathroutr 0.1.0","title":"pathroutr 0.1.0","text":"fleshed basic ideas created initial pkgdown site {sf} {stplanr} packages form foundation work demo vignette added demonstrate core idea approach","code":""},{"path":"/news/index.html","id":"pathroutr-001","dir":"Changelog","previous_headings":"","what":"pathroutr 0.0.1","title":"pathroutr 0.0.1","text":"Intial creation package draft implementation ideas pathroutr_example.Rmd created demonstrate workflow","code":""}]
